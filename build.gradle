import org.w3c.dom.NodeList

plugins {
    id "fabric-loom" version "0.8.23"
    id "jacoco"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "maven-publish"
    id "signing"
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

group = project.maven_group
archivesBaseName = project.archives_base_name
version = project.mod_version

repositories {
    maven {
        url "https://maven.jamieswhiteshirt.com/libs-release/"
    }
}

minecraft {
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    include "com.jamieswhiteshirt:rtree-3i-lite-fabric:0.3.0"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modApi "com.jamieswhiteshirt:rtree-3i-lite-fabric:0.3.0"
    // modRuntime("com.jamieswhiteshirt:developer-mode:1.0.15") {
    //     exclude group: "net.fabricmc.fabric-api"
    // }
    compileOnly "com.google.code.findbugs:jsr305:3.0.2"

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.2.+"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.2.+"
    testImplementation "org.mockito:mockito-core:2.+"
}

test {
    useJUnitPlatform()
    workingDir = "run"
}

processResources {
    exclude "**/*.psd"
}

afterEvaluate {
    remapJar {
        addNestedDependencies = false
    }
}

task bundleJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier = "all-dev"
}

task remapBundleJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: bundleJar) {
    input = bundleJar.archiveFile
    addNestedDependencies = true
    archiveClassifier = "all"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

project.ext.isReleaseVersion = !version.endsWith("-SNAPSHOT")
build.dependsOn remapBundleJar

publishing {
    publications {
        mavenJava(MavenPublication) {
            afterEvaluate {
                artifact remapJar
                artifact(remapSourcesJar.output) {
                    classifier = "sources"
                    builtBy remapSourcesJar
                }

                pom.withXml {
                    NodeList dependencies = asNode().dependencies

                    // Remove developer-mode dependency (should be modRuntimeOnly)
                    dependencies.'*'.findAll() {
                        it.artifactId.text() == 'developer-mode'
                    }.forEach() {
                        it.parent().remove(it)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = 'https://maven.jamieswhiteshirt.com/libs-release/'
            def snapshotsRepoUrl = 'https://maven.jamieswhiteshirt.com/libs-snapshot/'
            url = isReleaseVersion ? releasesRepoUrl : snapshotsRepoUrl

            credentials {
                username project.properties.mavenUser
                password project.properties.mavenPassword
            }
        }
    }
}

signing {
    required = isReleaseVersion
    sign publishing.publications.mavenJava
}

curseforge {
    if (project.hasProperty("curseForgeApiKey")) {
        apiKey = project.properties.curseForgeApiKey
    }
    project {
        id = "310078"
        changelogType = "markdown"
        changelog = file("CHANGELOG.md")
        releaseType = "beta"
        addGameVersion "1.16.2"
        addGameVersion "1.16.3"
        addGameVersion "Fabric"
        relations {
            requiredDependency "fabric-api"
        }
        mainArtifact(remapBundleJar) {
            displayName = "Clothesline $project.version"
        }
    }
    options {
        forgeGradleIntegration = false
    }
}

loom {
    accessWidener =  file("src/main/resources/clothesline.accesswidener")
}
